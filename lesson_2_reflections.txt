What happens when you initialize a repository? Why do you need to do it?

A new directory by the name '.git' gets created. This is where git stores metadata about the directory that it has now started to track, viz., the current directory.

git init tells git to start tracking the changes made to the directory, and the files in the directory. It basically brings the current directory under version control
----------------------------

How is the staging area different from the working directory and the repository? What value do you think it offers?

Staging area holds all the files changed to make the next intended logical checkpoint. Working directory holds all the files in the directory, while a repository is a working directory that has been git initialized.

Staging area allows us to collect files intended for a logical commit point, from where we can go back and forth till we get to the checkpoint, and then, make a commit.
----------------------------

How can you use the staging area to make sure you have one commit per logical change?

We can keep making changes to files and keep adding to the changed files to the staging area. We can then use diff --staged and the files in the staged area to pick and choose files which constitute a logical commit, and commit only those files
----------------------------

What are some situations when branches would be helpful in keeping your history organized? How would branches help?

Situations that I think a branch is justified for:
- When we want to develop a experimental feature, or do some changes that we may not be sure if it works.
- When we make specific changes to enable support for a particular system, client, OS.
- Maybe for different developers
----------------------------

How do the diagrams help you visualize the branch structure?

Diagrams help us to point to unreachable commits, if any that we are on, and aid is in making them reachable. It also helps us in viewing the stages/commit points where the branches were made from the master, and the changes that have since happened.
----------------------------

What is the result of merging two branches together? Why do we represent it in the diagram the way we do?

The result of mergin two branches together basically places the tip of the head of the destination branch - which is the current chacked out branch, at the head of the source branch. All the commits made on either of the branches up unti the point of the merge are available after the merge. So, a merge is jus tof change of labels to the commits - in a sense.
----------------------------

What are the pros and cons of Gitâ€™s automatic merging vs. always doing merges manually?

Manually merging always gives us better control. We can logically merge and see what lines need to go into the merged file. Auto merging needs too much of intelligence built in if there has to be some sort of correct merge. However, in cases where just new lines of code were added, mostly at the top/bottom of a file, or when a new function itself was added, maybe some sort of intelligence can be built in to do an auto merge. In any case, even after the auto merge, it is always prudent to check manually and then add/commit the merge.
----------------------------
